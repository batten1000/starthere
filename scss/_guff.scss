// Guff Library with some stuff stripped out
//https://github.com/kenwheeler/guff

// ###Settings

// Set Grid Column Count
$grid-columns: 12 !default;
// Set Grid Gutter (as px)
$grid-gutter: 20px !default;
// Set Grid Padding (as px)
$grid-padding: 20px !default;
// Set Grid Max Width (as px)
$grid-max-width: 1024px !default;
// ###Functions
$rem-base: 16px;

// Gets grid column width
@function span($cols: 4) {
  @if type-of($cols) != "number" {
    @warn "cols: #{$cols} is not a number";
    @return null;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @return percentage($cols/$grid-columns);
}
// ###Mixins

// Sets container styles
@mixin container {
  $valid: true;
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($rem-base) != "number" {
    @warn "rem-base: #{$rem-base} is not a number";
    $valid: false;
  }
  @if $valid == true {
    width: 100%;
    //max-width: $grid-max-width;
    @include clear;
  }
}

// Sets col container styles
@mixin col-container {
  $valid: true;
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($rem-base) != "number" {
    @warn "rem-base: #{$rem-base} is not a number";
    $valid: false;
  }
  @if $valid == true {
    width: 100%;
    text-align: justify !important;
    text-justify: distribute-all-lines;
    //font-size: 0 !important;
    max-width: $grid-max-width;
    & > * {
      text-align: left;
      //font-size: rem-calc($rem-base);
    }
    &:after {
      content: '';
      display: inline-block;
      width: 100%;
    }
  }
}

// Sets grid column width
@mixin span($cols: 4, $padding: true) {
  $valid: true;
  @if type-of($cols) != "number" {
    @warn "cols: #{$cols} is not a number";
    $valid: false;
  }
  @if type-of($padding) != "bool" {
    @warn "padding: #{$padding} is not a boolean";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if type-of($grid-padding) != "number" {
    @warn "grid-padding: #{$grid-padding} is not a number";
    $valid: false;
  }
  @if $valid == true {
    $column-width: $cols / $grid-columns;
    @if $padding != false {
    padding-left: $grid-padding;
    padding-right: $grid-padding;
    }
    width: percentage($column-width);
    float: left;
  }
}

// Sets grid column width (with gutter)
@mixin col($span: 4) {
  $valid: true;
  @if type-of($span) != "number" {
    @warn "span: #{$span} is not a number";
    $valid: false;
  }
  @if type-of($grid-max-width) != "number" {
    @warn "grid-max-width: #{$grid-max-width} is not a number";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if type-of($grid-gutter) != "number" {
    @warn "grid-gutter: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if $valid == true {
    $column-width: 100% / $grid-columns;
    $gutter: ($grid-gutter * 0.75) / $grid-max-width * 100;
    $span-width: $span * $column-width;
    width: $span-width - $gutter;
    vertical-align: top;
    display: inline-block;
  }
}

// Sets grid offet margin
@mixin offset($cols: 4) {
  $valid: true;
  @if type-of($cols) != "number" {
    @warn "cols: #{$cols} is not a number";
    $valid: false;
  }
  @if type-of($grid-columns) != "number" {
    @warn "grid-columns: #{$grid-columns} is not a number";
    $valid: false;
  }
  @if $valid == true {
    margin-left: percentage($cols/$grid-columns);
  }
}

// Sets ellipsis overflow
@mixin ellipsis($width: 100%) {
  $valid: true;
  @if type-of($width) != "number" {
    @warn "width: #{$width} is not a number";
    $valid: false;
  }
  @if $valid == true {
    display: inline-block;
    max-width: $width;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
}

// Clearfix include
@mixin clear($extend: true) {
  $valid: true;
  @if type-of($extend) != "bool" {
    @warn "extend: #{$extend} is not a boolean";
    $valid: false;
  }
  @if $valid == true {
    @if $extend {
      @extend %clear;
    }
    @else {
      #{'&'}:after {
      content:"";
      display:table;
      clear:both;
      }
    }
  }
}

// Placeholder for clear
%clear:after {
  content:"";
  display:table;
  clear:both;
}


// Inline List

@mixin inline-list($float: true) {
  $valid: true;
  @if type-of($float) != "bool" {
    @warn "float: #{$float} is not a boolean";
    $valid: false;
  }
  @if $valid == true {
    list-style-type:none;
    padding:0;
    margin:0;
    overflow:hidden;
    > li{
        @if $float == true {
        display:block;
        float:left;
      } @else {
        display: inline-block;
      }
    }
  }
}

